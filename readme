Run a "hello world" from nothing using Amazon EC2 instance.

ganache: 
./node_modules/.bin/ganache-cli --port 8545  --chainId 5777 -h <your ec2 dns eg: ec2-35-81-171-73.us-west-2.compute.amazonaws.com>

node:
Web3 =  require('web3')
web3 = new Web3('http://ec2-... your dns instance name.us-west-2.compute.amazonaws.com:8545')
sourceCode = fs.readFileSync('Hello.sol').toString();
compiler= require('solc')
compiledCode = compiler.compile(sourceCode)
helloInterface = JSON.parse(compiledCode.contracts[':hello'].interface)
helloByteCode = compiledCode.contracts[':hello'].bytecode
helloContract = new web3.eth.Contract(helloInterface)
web3.eth.getAccounts().then(function (result) {accounts = result})
helloContract.deploy({ data: helloByteCode } ).send({ from:accounts[0], gas: 470000}).then(function(result) { myContract = result; })
web3.eth.getBalance(accounts[1]).then(function(result) { console.log(web3.utils.fromWei(result,"ether"));  });
myContract.methods.setGreeting("hello blockchain").send({ from: accounts[0]});
myContract.methods.getGreeting().call().then(console.log);






# updated version running node.js v18, solidity 0.8.19      (ran on 7/31/2023)

sudo apt-get update
curl -sL https://deb.nodesource.com/setup_18.x -o nodesource_setup.sh
sudo bash nodesource_setup.sh
sudo apt install nodejs build-essential

npm init -y
npm install web3 solc@0.8.19	
npm install ganache-cli



vi Hello.sol

pragma solidity ^0.8.19;

// Store a single data point and allow fetching/updating of that datapoint
contract Hello {

    // data point
    string public storedData;

    event myEventTest(string eventOutput);

    function set(string memory myText) public {
        storedData = myText;
        emit myEventTest(myText);
    }

    function get() public view returns (string memory) {
        return storedData;
    }

}

./node_modules/.bin/ganache-cli --port 8545  --chainId 5777 -h  ec2-35-92-115-75.us-west-2.compute.amazonaws.com
node:










# run the node console
node


const { Web3 } = require('web3');
web3 = new Web3('http://ec2-35-92-115-75.us-west-2.compute.amazonaws.com:8545')
var solc = require('solc');
var CONTRACT_FILE = 'Hello.sol'
var content =fs.readFileSync(CONTRACT_FILE).toString()
var input = {
   language: 'Solidity',
   sources: {
     [CONTRACT_FILE]: {
       content: content
     }
   },
   settings: {
     outputSelection: {
       '*': {
         '*': ['*']
       }
     }
   }
}

var compiled = solc.compile(JSON.stringify(input))
var output = JSON.parse(compiled)
var abi = output.contracts[CONTRACT_FILE]['Hello'].abi
var bytecode = output.contracts[CONTRACT_FILE]['Hello'].evm.bytecode.object
await web3.eth.getAccounts().then(function (result) {accounts = result})
await HelloWorld.deploy({ data: bytecode } ).send({ from: accounts[0], gas: 470000}).then(function(result) { myContract = result;})
await myContract.methods.set("hello ...").send({ from: accounts[0]});
await myContract.methods.get().call().then(console.log);


ref
https://stackoverflow.com/questions/53461034/solidity-compiler-problem-with-helloworld-smart-contract?noredirect=1&lq=1






